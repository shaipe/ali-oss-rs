// Copyright © Shaipe
//! Oss 对象中的常量对接
//! 

#[allow(dead_code)]
pub enum OSSHeaders {
    AcceptEncoding,
    Authorization,
    CacheControl,
    ContentDisposition,
    ContentEncoding,
    ContentLength,
    ContentMD5,
    ContentType,
    ContentLanguage,
    Date,
    Etag,
    Expires,
    Host,
    LastModified,
    Range,
    Location,
    Origin,
    Server,
    UserAgent,
    IfModifiedSince,
    IfUnmodifiedSince,
    IfMatch,
    IfNoneMatch,
    ACReqMethod,
    ACReqHeaders,
    OssACL,
    OssMetaPrefix,
    OssObjectACL,
    OssSecurityToken,
    OssServerSideEncryption,
    OssServerSideEncryptionKeyID,
    OssCopySource,
    OssCopySourceRange,
    OssCopySourceIfMatch,
    OssCopySourceIfNoneMatch,
    OssCopySourceIfModifiedSince,
    OssCopySourceIfUnmodifiedSince,
    OssMetadataDirective,
    OssNextAppendPosition,
    OssRequestID,
    OssCRC64,
    OssSymlinkTarget,
    OssStorageClass,
    OssCallback,
    OssCallbackVar,
    OssRequester,
    OssTagging,
    OssTaggingDirective,
    OssTrafficLimit
}

impl OSSHeaders {
    pub fn as_str(&self) -> &'static str {
        match *self {
            OSSHeaders::AcceptEncoding => "Accept-Encoding",
            OSSHeaders::Authorization=> "Authorization",
            OSSHeaders::CacheControl => "Cache-Control",
            OSSHeaders::ContentDisposition => "Content-Disposition",
            OSSHeaders::ContentEncoding => "Content-Encoding",
            OSSHeaders::ContentLength=> "Content-Length",
            OSSHeaders::ContentMD5   => "Content-MD5",
            OSSHeaders::ContentType  => "Content-Type",
            OSSHeaders::ContentLanguage => "Content-Language",
            OSSHeaders::Date => "Date",
            OSSHeaders::Etag => "ETag",
            OSSHeaders::Expires => "Expires",
            OSSHeaders::Host => "Host",
            OSSHeaders::LastModified => "Last-Modified",
            OSSHeaders::Range   => "Range",
            OSSHeaders::Location=> "Location",
            OSSHeaders::Origin  => "Origin",
            OSSHeaders::Server  => "Server",
            OSSHeaders::UserAgent => "User-Agent",
            OSSHeaders::IfModifiedSince => "If-Modified-Since",
            OSSHeaders::IfUnmodifiedSince => "If-Unmodified-Since",
            OSSHeaders::IfMatch => "If-Match",
            OSSHeaders::IfNoneMatch  => "If-None-Match",
            OSSHeaders::ACReqMethod  => "Access-Control-Request-Method",
            OSSHeaders::ACReqHeaders => "Access-Control-Request-Headers",

            OSSHeaders::OssACL  => "X-Oss-Acl",
            OSSHeaders::OssMetaPrefix=> "X-Oss-Meta-",
            OSSHeaders::OssObjectACL => "X-Oss-Object-Acl",
            OSSHeaders::OssSecurityToken  => "X-Oss-Security-Token",
            OSSHeaders::OssServerSideEncryption   => "X-Oss-Server-Side-Encryption",
            OSSHeaders::OssServerSideEncryptionKeyID   => "X-Oss-Server-Side-Encryption-Key-Id",
            OSSHeaders::OssCopySource=> "X-Oss-Copy-Source",
            OSSHeaders::OssCopySourceRange=> "X-Oss-Copy-Source-Range",
            OSSHeaders::OssCopySourceIfMatch => "X-Oss-Copy-Source-If-Match",
            OSSHeaders::OssCopySourceIfNoneMatch => "X-Oss-Copy-Source-If-None-Match",
            OSSHeaders::OssCopySourceIfModifiedSince => "X-Oss-Copy-Source-If-Modified-Since",
            OSSHeaders::OssCopySourceIfUnmodifiedSince => "X-Oss-Copy-Source-If-Unmodified-Since",
            OSSHeaders::OssMetadataDirective  => "X-Oss-Metadata-Directive",
            OSSHeaders::OssNextAppendPosition => "X-Oss-Next-Append-Position",
            OSSHeaders::OssRequestID => "X-Oss-Request-Id",
            OSSHeaders::OssCRC64 => "X-Oss-Hash-Crc64ecma",
            OSSHeaders::OssSymlinkTarget  => "X-Oss-Symlink-Target",
            OSSHeaders::OssStorageClass   => "X-Oss-Storage-Class",
            OSSHeaders::OssCallback  => "X-Oss-Callback",
            OSSHeaders::OssCallbackVar => "X-Oss-Callback-Var",
            OSSHeaders::OssRequester => "X-Oss-Request-Payer",
            OSSHeaders::OssTagging   => "X-Oss-Tagging",
            OSSHeaders::OssTaggingDirective  => "X-Oss-Tagging-Directive",
            OSSHeaders::OssTrafficLimit   => "X-Oss-Traffic-Limit"
        }
    }
}